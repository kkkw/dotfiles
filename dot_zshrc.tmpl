# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export ZIM_HOME=$HOME/.zim

# 非同期読み込みのためにzsh-deferを初期化
source ${ZIM_HOME}/modules/zsh-defer/zsh-defer.plugin.zsh

# ZIM
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  # 静的初期化スクリプトが存在しないか古い場合は更新
  zsh-defer source ${ZIM_HOME}/zimfw.zsh init -q
fi
source ${ZIM_HOME}/init.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#alias -g B='`git branch -a | peco --prompt "GIT BRANCH>" | head -n 1 | sed -e "s/^\*\s*//g"`'
alias -g B='`git branch | peco | sed -e "s/^\*[ ]*//g"`'

function peco-select-history() {
    BUFFER=$(fc -l -r -n 1 | peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle redisplay
}
zle -N peco-select-history
bindkey '^r' peco-select-history

function directory-bookmark() {
    BUFFER=$(cat ~/.config/directory-bookmark.txt | peco )
    CURSOR=$#BUFFER
    zle accept-line
}
zle -N directory-bookmark
bindkey '^b' directory-bookmark

function git-root() {
  if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    cd `git rev-parse --show-toplevel`
  fi
}

path=(
  /opt/homebrew/bin(N-/)
  /opt/homebrew/sbin(N-/)
  $HOME/Library/Python/3.9/bin(N-/)
  $HOME/bin(N-/)
  /snap/bin(N-/)
  $path
)

which direnv > /dev/null 2>&1 && eval "$(direnv hook zsh)"
which jump> /dev/null 2>&1 && eval "$(jump shell)"

export NNN_PLUG='o:fzopen;m:nmount;x:_chmod +x $nnn;j:jump'
export NNN_BMS='4:/media/yuya/volume4000;c:/media/yuya/volume4000/comic;2:/media/yuya/volume2000-1;b:~/workspace/beast;a:~/workspace/aladdin;h:~/workspace/hibiki-bot'
export NNN_FIFO=/tmp/nnn.fifo
n()
{
    export NNN_TMPFILE=${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd

    nnn "$@"

    if [ -f $NNN_TMPFILE ]; then
            . $NNN_TMPFILE
            rm -f $NNN_TMPFILE > /dev/null
    fi
}

[[ -s /opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc ]] && source /opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc
[[ -s /opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc ]] && source  /opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc

export HOMEBREW_GITHUB_API_TOKEN={{ (bitwarden "item" "HOMEBREW_GITHUB_API_TOKEN").notes | trim }}
